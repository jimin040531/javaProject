    /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package deu.hms.checkin;

import deu.hms.reservation.ReservationData;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;
/**
 *
 * @author Jimin
 */
public class CheckInUI extends JFrame {

    private ReservationManager reservationManager;

    public CheckInUI() {
        reservationManager = new ReservationManager();
        initComponents();
        setLocationRelativeTo(null);
    }

    private void loadReservationTableData(List<ReservationData> reservationList) {
        DefaultTableModel model = (DefaultTableModel) reservationListTable.getModel();
        model.setRowCount(0);
        for (ReservationData reservation : reservationList) {
            // 필요한 필드만 테이블에 추가
            model.addRow(new Object[]{
                reservation.getUniqueNumber(),
                reservation.getName(),
                reservation.getPhoneNumber(),
                reservation.getRoomNumber(),
                reservation.getGuestCount(),
                reservation.getStayCost(),
                reservation.getPaymentMethod(),
                reservation.getStatus()
            });
        }
    }

    // 요청 사항과 함께 예약 정보를 업데이트하여 파일에 저장하는 메서드
    private void saveUpdatedReservationWithRequest(String reservationId, String requestDetails) {
        List<ReservationData> reservations = reservationManager.getReservationsFromFile();

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("Reservation.txt"))) {
            for (ReservationData reservation : reservations) {
                if (reservation.getUniqueNumber().equals(reservationId)) {
                    // 요청 사항 포함하여 업데이트된 데이터 작성
                    writer.write(reservation.getUniqueNumber() + "," +
                                 reservation.getName() + "," +
                                 reservation.getAddress() + "," +
                                 reservation.getPhoneNumber() + "," +
                                 reservation.getCheckInDate() + "," +
                                 reservation.getCheckOutDate() + "," +
                                 reservation.getRoomNumber() + "," +
                                 reservation.getGuestCount() + "," +
                                 reservation.getStayCost() + "," +
                                 reservation.getPaymentMethod() + "," +
                                 reservation.getStatus() + "," +
                                 requestDetails);
                } else {
                    // 기존 예약 정보 작성
                    writer.write(reservation.toCSV());
                }
                writer.newLine();
            }
        } catch (IOException e) {
            System.err.println("예약 정보를 업데이트하는 중 오류 발생: " + e.getMessage());
        }
    }
    
    private void processCheckIn() {
        int selectedRow = reservationListTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "체크인할 행을 선택해주세요.", "오류", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String reservationId = (String) reservationListTable.getValueAt(selectedRow, 0);
        String requestDetails = reqestTextField.getText().trim(); // 요청 사항 입력 값

        // 예약 상태 업데이트
        List<ReservationData> reservations = reservationManager.getReservationsFromFile();
        for (ReservationData reservation : reservations) {
            if (reservation.getUniqueNumber().equals(reservationId)) {
                reservation.setStatus("체크인 완료");
            }
        }

        // 파일에 업데이트된 정보 저장
        reservationManager.writeReservationsToFile(reservations);

        // 요청 사항 출력 (또는 다른 필요한 처리)
        JOptionPane.showMessageDialog(this, "체크인 처리가 완료되었습니다.\n요청 사항: " + requestDetails, "체크인 완료", JOptionPane.INFORMATION_MESSAGE);
    }
    
    public void addReservationToTable(ReservationData reservation) {
        DefaultTableModel model = (DefaultTableModel) reservationListTable.getModel();
        model.addRow(new Object[]{
            reservation.getUniqueNumber(),
            reservation.getName(),
            reservation.getPhoneNumber(),
            reservation.getRoomNumber(),
            reservation.getGuestCount(),
            reservation.getStayCost(),
            reservation.getPaymentMethod(),
            reservation.getStatus()
        });
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paymentGroup = new javax.swing.ButtonGroup();
        reqestLabel = new javax.swing.JLabel();
        roomCountTextField = new javax.swing.JTextField();
        searchTextField = new javax.swing.JTextField();
        searchComboBox = new javax.swing.JComboBox<>();
        checkinButton = new javax.swing.JButton();
        checkInLabel = new javax.swing.JLabel();
        ScrollPane = new javax.swing.JScrollPane();
        reservationListTable = new javax.swing.JTable();
        reqestTextField = new javax.swing.JTextField();
        reservationlistLabel = new javax.swing.JLabel();
        roomAmountLabel = new javax.swing.JLabel();
        guestRegistButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        reqestLabel.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        reqestLabel.setText("요청 사항");

        roomCountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomCountTextFieldActionPerformed(evt);
            }
        });

        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        searchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "고유 번호", "성이름", "방 번호" }));
        searchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboBoxActionPerformed(evt);
            }
        });

        checkinButton.setText("체크인");
        checkinButton.setMaximumSize(new java.awt.Dimension(82, 23));
        checkinButton.setMinimumSize(new java.awt.Dimension(82, 23));
        checkinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkinButtonActionPerformed(evt);
            }
        });

        checkInLabel.setFont(new java.awt.Font("맑은 고딕", 1, 24)); // NOI18N
        checkInLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        checkInLabel.setText("체크인");

        reservationListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "고유 번호", "이름", "전화 번호", "방 번호", "인원수", "객실 금액", "결제 수단", "상태"
            }
        ));
        ScrollPane.setViewportView(reservationListTable);

        reqestTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqestTextFieldActionPerformed(evt);
            }
        });

        reservationlistLabel.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        reservationlistLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reservationlistLabel.setText("손님 명단");

        roomAmountLabel.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        roomAmountLabel.setText("객실 금액");

        guestRegistButton.setText("손님 등록");
        guestRegistButton.setActionCommand("등록");
        guestRegistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestRegistButtonActionPerformed(evt);
            }
        });

        searchButton.setLabel("검색");
        searchButton.setMaximumSize(new java.awt.Dimension(82, 23));
        searchButton.setMinimumSize(new java.awt.Dimension(82, 23));
        searchButton.setPreferredSize(new java.awt.Dimension(82, 23));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, Short.MAX_VALUE))
                    .addComponent(ScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reqestLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(roomAmountLabel)
                        .addGap(85, 85, 85))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reservationlistLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(guestRegistButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reqestTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roomCountTextField)
                            .addComponent(checkinButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(checkInLabel)
                .addGap(261, 261, 261))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(checkInLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reservationlistLabel)
                    .addComponent(guestRegistButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomAmountLabel)
                    .addComponent(reqestLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(roomCountTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(reqestTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void searchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchComboBoxActionPerformed

    private void checkinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkinButtonActionPerformed
        int selectedRow = reservationListTable.getSelectedRow(); // 테이블에서 선택된 행 가져오기

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "체크인할 예약 정보를 먼저 선택해주세요.", "오류", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 테이블에서 선택된 예약자의 고유 번호 가져오기
        String reservationId = (String) reservationListTable.getValueAt(selectedRow, 0);
        String requestDetails = reqestTextField.getText().trim(); // 요청 사항 가져오기

        // 예약 상태 업데이트 (체크인 완료로 변경)
        reservationManager.updateReservationStatus(reservationId, "체크인 완료");

        // 요청 사항과 함께 파일에 저장
        saveUpdatedReservationWithRequest(reservationId, requestDetails);

        // 테이블에서 선택된 행 삭제
        DefaultTableModel model = (DefaultTableModel) reservationListTable.getModel();
        model.removeRow(selectedRow);

        // 요청 사항 텍스트 필드 초기화
        reqestTextField.setText("");
       roomCountTextField.setText("");
        JOptionPane.showMessageDialog(this, "체크인이 완료되었습니다.", "체크인 완료", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_checkinButtonActionPerformed

    private void reqestTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqestTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reqestTextFieldActionPerformed

    private void guestRegistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestRegistButtonActionPerformed
        // GuestRegist 인스턴스를 생성하여 손님 등록 창을 표시
        GuestRegist guestRegistFrame = new GuestRegist(this);
        guestRegistFrame.setLocationRelativeTo(this);  // 현재 창을 기준으로 중앙에 배치
        guestRegistFrame.setVisible(true);
    }//GEN-LAST:event_guestRegistButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String searchTerm = searchTextField.getText().trim();
        String searchType = (String) searchComboBox.getSelectedItem();

        if (searchTerm.isEmpty()) {
            JOptionPane.showMessageDialog(null, "검색어를 입력하세요.", "오류", JOptionPane.ERROR_MESSAGE);
            return;
        }

        List<ReservationData> reservationList = FileHandler.loadFromFile("Reservation.txt");
        System.out.println("파일에서 로드된 예약자 수: " + reservationList.size()); // 로그 추가

        List<ReservationData> filteredData = new ArrayList<>();

        for (ReservationData reservation : reservationList) {
            System.out.println("검색 중인 예약자: " + reservation.getName()); // 로그 추가
            if ("성이름".equals(searchType) && reservation.getName().contains(searchTerm)) {
                filteredData.add(reservation);
            } else if ("고유 번호".equals(searchType) && reservation.getUniqueNumber().equals(searchTerm)) {
                filteredData.add(reservation);
            } else if ("방 번호".equals(searchType) && reservation.getRoomNumber().equals(searchTerm)) {
                filteredData.add(reservation);
            }
        }

        DefaultTableModel model = (DefaultTableModel) reservationListTable.getModel();
        model.setRowCount(0);

        if (!filteredData.isEmpty()) {
            System.out.println("검색된 데이터 수: " + filteredData.size()); // 로그 추가
            loadReservationTableData(filteredData);
        } else {
            JOptionPane.showMessageDialog(null, "검색 결과가 없습니다.", "정보", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void roomCountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomCountTextFieldActionPerformed

    }//GEN-LAST:event_roomCountTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckInUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JLabel checkInLabel;
    private javax.swing.JButton checkinButton;
    private javax.swing.JButton guestRegistButton;
    private javax.swing.ButtonGroup paymentGroup;
    private javax.swing.JLabel reqestLabel;
    private javax.swing.JTextField reqestTextField;
    private javax.swing.JTable reservationListTable;
    private javax.swing.JLabel reservationlistLabel;
    private javax.swing.JLabel roomAmountLabel;
    private javax.swing.JTextField roomCountTextField;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> searchComboBox;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables

}
